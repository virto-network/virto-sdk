import { Struct, Vector, u8, str, createCodec } from 'scale-ts';
import { lookup } from './lookup.mjs';
import '../../utils/ss58-util.mjs';
import '../scale/Binary.mjs';
import '../scale/bitSequence.mjs';
import '../scale/char.mjs';
import { compactNumber } from '../scale/compact.mjs';
import '../scale/Hex.mjs';
import '../scale/fixed-str.mjs';
import '../scale/Variant.mjs';
import '../scale/ethAccount.mjs';
import '../scale/shaped.mjs';
import { v14Pallet } from './pallets.mjs';

const empty = new Uint8Array();
const Always = (value) => createCodec(
  () => empty,
  () => value
);
const extrinsic = Struct({
  type: compactNumber,
  version: u8,
  signedExtensions: Vector(
    Struct({
      identifier: str,
      type: compactNumber,
      additionalSigned: compactNumber
    })
  )
});
const v14 = Struct({
  lookup,
  pallets: Vector(Struct({ ...v14Pallet, docs: Always([]) })),
  extrinsic,
  type: compactNumber,
  apis: Always([])
});

export { v14 };
//# sourceMappingURL=v14.mjs.map
