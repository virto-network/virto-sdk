{"version":3,"file":"enum.mjs","sources":["../../../src/types/enum.ts"],"sourcesContent":["export type Enum<T extends {}> = {\n  [K in keyof T & string]: {\n    type: K\n    value: T[K]\n  }\n}[keyof T & string]\n\nexport type EnumVariant<\n  T extends { type: string; value?: any },\n  K extends T[\"type\"],\n> = T & {\n  type: K\n}\n\nexport type ExtractEnumValue<\n  T extends { type: string; value?: any },\n  K extends string,\n> = EnumVariant<T, K>[\"value\"]\n\ntype ValueArg<V> = undefined extends V ? [value?: V] : [value: V]\n\ninterface Discriminant {\n  is<T extends { type: string; value: any }, K extends T[\"type\"]>(\n    value: T,\n    type: K,\n  ): value is T & { type: K }\n  as<T extends { type: string; value: any }, K extends T[\"type\"]>(\n    value: T,\n    type: K,\n  ): ExtractEnumValue<T, K>\n}\nconst discriminant: Discriminant = {\n  is<T extends { type: string; value: any }, K extends T[\"type\"]>(\n    value: T,\n    type: K,\n  ): value is T & { type: K } {\n    return value.type === type\n  },\n  as(value, type) {\n    if (type !== value.type)\n      throw new Error(\n        `Enum.as(enum, ${type}) used with actual type ${value.type}`,\n      )\n    return value\n  },\n}\ninterface EnumFn extends Discriminant {\n  <T extends { type: string; value: any }, K extends T[\"type\"]>(\n    type: K,\n    ...[value]: ValueArg<ExtractEnumValue<T, K>>\n  ): EnumVariant<T, K>\n}\nexport const Enum: EnumFn = Object.assign((type: string, value?: any) => {\n  return {\n    type,\n    value,\n  } as any\n}, discriminant)\n\n// well-known enums\nexport type GetEnum<T extends Enum<any>> = {\n  [K in T[\"type\"]]: (\n    ...args: ExtractEnumValue<T, K> extends undefined\n      ? []\n      : [value: ExtractEnumValue<T, K>]\n  ) => EnumVariant<T, K>\n}\nexport const _Enum = new Proxy(\n  {},\n  {\n    get(_, prop: string) {\n      return (value: string) => Enum(prop, value)\n    },\n  },\n)\n\n// type Bar = Enum<{\n//   Kaka: 1\n//   Bar: 2\n// }>\n\n// type FooInput = Enum<{\n//   foo: \"foo\" | undefined\n//   bar: Bar\n//   baz: number\n//   wtf: boolean\n// }>\n\n// declare function foo(foo: FooInput): void\n// foo(Enum(\"bar\", Enum(\"Bar\", 2)))\n\n// const InputEnum: GetEnum<FooInput> = null as any;\n// InputEnum.bar(Enum('Bar', 2))\n"],"names":[],"mappings":"AA+BA,MAAM,YAA6B,GAAA;AAAA,EACjC,EAAA,CACE,OACA,IAC0B,EAAA;AAC1B,IAAA,OAAO,MAAM,IAAS,KAAA,IAAA;AAAA,GACxB;AAAA,EACA,EAAA,CAAG,OAAO,IAAM,EAAA;AACd,IAAA,IAAI,SAAS,KAAM,CAAA,IAAA;AACjB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAiB,cAAA,EAAA,IAAI,CAA2B,wBAAA,EAAA,KAAA,CAAM,IAAI,CAAA;AAAA,OAC5D;AACF,IAAO,OAAA,KAAA;AAAA;AAEX,CAAA;AAOO,MAAM,IAAe,GAAA,MAAA,CAAO,MAAO,CAAA,CAAC,MAAc,KAAgB,KAAA;AACvE,EAAO,OAAA;AAAA,IACL,IAAA;AAAA,IACA;AAAA,GACF;AACF,CAAA,EAAG,YAAY;AAUR,MAAM,QAAQ,IAAI,KAAA;AAAA,EACvB,EAAC;AAAA,EACD;AAAA,IACE,GAAA,CAAI,GAAG,IAAc,EAAA;AACnB,MAAA,OAAO,CAAC,KAAA,KAAkB,IAAK,CAAA,IAAA,EAAM,KAAK,CAAA;AAAA;AAC5C;AAEJ;;;;"}