{"version":3,"file":"mapObject.mjs","sources":["../../src/mapObject.ts"],"sourcesContent":["export function mapObject<K extends string | number | symbol, I, O>(\n  input: Record<K, I>,\n  mapper: (i: I, k: K) => O,\n): Record<K, O>\n\nexport function mapObject<K extends string | number | symbol, I, O>(\n  input: Record<K, I>,\n  mapper: (i: I, k?: K) => O,\n): Record<K, O> {\n  return Object.fromEntries(\n    Object.entries(input).map(\n      ([key, value]: any) => [key, mapper(value, key)] as const,\n    ),\n  ) as any\n}\n\nexport type StringRecord<T> = {\n  [Sym: symbol]: never\n  [Num: number]: never\n  [Str: string]: T\n}\n\nexport const mapStringRecord = <I, O>(\n  input: StringRecord<I>,\n  mapper: (value: I, key: string) => O,\n): StringRecord<O> =>\n  Object.fromEntries(\n    Object.entries(input).map(([key, value]) => [key, mapper(value, key)]),\n  ) as StringRecord<O>\n"],"names":[],"mappings":"AAKgB,SAAA,SAAA,CACd,OACA,MACc,EAAA;AACd,EAAA,OAAO,MAAO,CAAA,WAAA;AAAA,IACZ,MAAA,CAAO,OAAQ,CAAA,KAAK,CAAE,CAAA,GAAA;AAAA,MACpB,CAAC,CAAC,GAAA,EAAK,KAAK,CAAA,KAAW,CAAC,GAAK,EAAA,MAAA,CAAO,KAAO,EAAA,GAAG,CAAC;AAAA;AACjD,GACF;AACF;AAQO,MAAM,eAAkB,GAAA,CAC7B,KACA,EAAA,MAAA,KAEA,MAAO,CAAA,WAAA;AAAA,EACL,OAAO,OAAQ,CAAA,KAAK,CAAE,CAAA,GAAA,CAAI,CAAC,CAAC,GAAA,EAAK,KAAK,CAAA,KAAM,CAAC,GAAK,EAAA,MAAA,CAAO,KAAO,EAAA,GAAG,CAAC,CAAC;AACvE;;;;"}