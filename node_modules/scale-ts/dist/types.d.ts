export declare type Encoder<T> = (value: T) => Uint8Array;
export declare type Decoder<T> = (value: Uint8Array | ArrayBuffer | string) => T;
export declare type Codec<T> = [Encoder<T>, Decoder<T>] & {
    enc: Encoder<T>;
    dec: Decoder<T>;
};
export declare type CodecType<T extends Codec<any>> = T extends Codec<infer V> ? V : unknown;
export declare type EncoderType<T extends Encoder<any>> = T extends Encoder<infer V> ? V : unknown;
export declare type DecoderType<T extends Decoder<any>> = T extends Decoder<infer V> ? V : unknown;
export declare type StringRecord<T> = {
    [Sym: symbol]: never;
    [Num: number]: never;
    [Str: string]: T;
};
